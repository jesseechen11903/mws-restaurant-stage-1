/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./js/restaurant_info.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./js/dbhelper.js":
/*!************************!*\
  !*** ./js/dbhelper.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\r\nommon database helper functions.\r\nn\n\nvar _idb = __webpack_require__(/*! idb */ \"./node_modules/idb/lib/idb.js\");\n\nvar _idb2 = _interopRequireDefault(_idb);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar DBHelper = function () {\n  function DBHelper(db) {\n    _classCallCheck(this, DBHelper);\n\n    this.dbPromise = db;\n  }\n\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\n\n\n  _createClass(DBHelper, null, [{\n    key: 'fetchRestaurantJson',\n\n    /*\r\n     * fetch result from website\r\n     */\n    value: function fetchRestaurantJson(dbPromise) {\n      var restaurant_url = DBHelper.DATABASE_URL + '/restaurants';\n\n      console.log('fetchRestaurantJson');\n      fetch(restaurant_url).then(function (response) {\n        return response.json();\n      }).then(function (response) {\n        console.log(response);\n        dbPromise = _idb2.default.open('restaurants');\n        dbPromise.then(function (db) {\n          console.log('read transaction reviews');\n          var tx = db.transaction('reviews', 'readwrite');\n          response.map(function (data) {\n            tx.objectStore('reviews').put(data);\n          });\n          return tx.complete;\n        }).catch(function (error) {\n          console.log('error ' + error);\n        });\n      }).catch(function (response) {\n        var error = 'Request failed. Returned status of ' + response.status;\n        callback(error, null);\n      });\n    }\n    /*\r\n     * fetch result from website\r\n     */\n\n  }, {\n    key: 'fetchJson',\n    value: function fetchJson(callback) {\n      var restaurant_url = DBHelper.DATABASE_URL + '/restaurants';\n\n      fetch(restaurant_url).then(function (response) {\n        return response.json();\n      }).then(function (response) {\n        // console.log(response);\n        // store\n        callback(null, response);\n      }).catch(function (response) {\n        var error = 'Request failed. Returned status of ' + response.status;\n        callback(error, null);\n      });\n    }\n\n    /**\r\n     * Fetch all restaurants.\r\n     * this is the main method to read and cache from indexDB\r\n     */\n\n  }, {\n    key: 'fetchRestaurants',\n    value: function fetchRestaurants(callback, index) {\n      console.log('read db');\n      if (!('indexedDB' in window)) {\n        console.log('This browser does not support IndexedDB');\n        return;\n      }\n      if (!navigator.serviceWorker) {\n        return Promise.resolve();\n      }\n      console.log('open db');\n      var dbpromise = _idb2.default.open('restaurants', 1);\n      dbpromise.then(function (db) {\n        var tx = db.transaction('reviews', 'readonly');\n        var store = tx.objectStore('reviews');\n        console.log('get from object store');\n        return index ? store.get(index) : store.getAll();\n      }).then(function () {\n        console.log('reading from indexeddb');\n        callback(null, response);\n      }).catch(function (error) {\n        console.log('fetch from server ' + error.message);\n        DBHelper.fetchJson(callback);\n      });\n    }\n\n    /**\r\n     * Fetch a restaurant by its ID.\r\n     */\n\n  }, {\n    key: 'fetchRestaurantById',\n    value: function fetchRestaurantById(id, callback) {\n      var identifier = 'id';\n      // fetch all restaurants with proper error handling.\n      DBHelper.fetchRestaurants(function (error, restaurants) {\n        if (error) {\n          callback(error, null);\n        } else {\n          var restaurant = restaurants.find(function (r) {\n            return r.id == id;\n          });\n          if (restaurant) {\n            // Got the restaurant\n            callback(null, restaurant);\n          } else {\n            // Restaurant does not exist in the database\n            callback('Restaurant does not exist', null);\n          }\n        }\n      }, identifier);\n    }\n\n    /**\r\n     * Fetch all restaurants.\r\n     * this is the main method to read and cache from indexDB\r\n     */\n\n  }, {\n    key: 'fetchAllReviewsByRestaurant',\n    value: function fetchAllReviewsByRestaurant(id) {\n      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'All';\n      var dbPromise = arguments[2];\n      var callback = arguments[3];\n\n      var restaurant_url = DBHelper.DATABASE_URL;\n      if (type === 'All') {\n        restaurant_url = restaurant_url + ('/reviews/?restaurant_id=' + id);\n      } else if (type === 'I') {\n        restaurant_url = restaurant_url + ('/reviews/' + id);\n      }\n\n      fetch(restaurant_url).then(function (response) {\n        return response.json();\n      }).then(function (response) {\n\n        dbPromise.then(function (db) {\n          var tx = db.transaction('reviews-info', 'readwrite');\n          response.map(function (data) {\n            tx.objectStore('reviews-info').put(data);\n          });\n          return tx.complete;\n        }).catch(function (error) {\n          console.log('failed to store ' + error.message);\n        });\n        callback(null, response);\n      }).catch(function (error) {\n        console.log('fetch from server ' + error.message);\n        DBHelper.fetchReviews(id, type, callback);\n      });\n    }\n    /**\r\n     * Fetch a restaurant by its ID.\r\n     */\n\n  }, {\n    key: 'fetchReviews',\n    value: function fetchReviews(id) {\n      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'All';\n      var callback = arguments[2];\n\n      // static fetchAllReviewsByRestaurant(id, type = 'All', callback) {\n      var restaurant_url = DBHelper.DATABASE_URL;\n      if (type === 'All') {\n        restaurant_url = restaurant_url + ('/reviews/?restaurant_id=' + id);\n      } else if (type === 'I') {\n        restaurant_url = restaurant_url + ('/reviews/' + id);\n      }\n\n      fetch(restaurant_url).then(function (response) {\n        return response.json();\n      }).then(function (response) {\n        console.log(response);\n        callback(null, response);\n        // store\n        var dbPromise = _idb2.default.open('restaurants_review');\n        dbPromise.then(function (db) {\n          var tx = db.transaction('reviews-info', 'readwrite');\n          response.map(function (data) {\n            console.log('help emmemememememe');\n            tx.objectStore('reviews-info').put(data);\n          });\n          return tx.complete;\n        }).catch(function (response) {\n          console.log('error here' + response);\n          // DOMEXception here\n        });\n      }).catch(function (response) {\n        var error = 'Request failed. Returned status of ' + response.status;\n\n        callback(error, null);\n      });\n    }\n\n    /* post the review data */\n\n  }, {\n    key: 'postReviewData',\n    value: function postReviewData(review, callback) {\n      var restaurant_url = DBHelper.DATABASE_URL + '/reviews/';\n\n      if (review && review.review_id) {\n        restaurant_url = restaurant_url.concat('' + review.review_id);\n      }\n      var value = {};\n      value.name = review.name;\n      value.rating = review.rating;\n      value.comments = review.comments;\n      fetch(restaurant_url, {\n        method: 'post',\n        body: value\n      }).then(function (response) {\n        console.log('update ' + response);\n        return response.json();\n      }).then(function (response) {\n        console.log('data saved');\n      }).catch(function (response) {\n        var msg = 'Currently offline data will be save later';\n        // navigator.serviceWorker.controller.postMessage(`Client 1 says ${msg}`);\n        callback(null, review);\n      });\n    }\n\n    /**\r\n     * Fetch restaurants by a cuisine type with proper error handling.\r\n     */\n\n  }, {\n    key: 'fetchRestaurantByCuisine',\n    value: function fetchRestaurantByCuisine(cuisine, callback) {\n      var identifier = 'cuisine_type';\n      // Fetch all restaurants  with proper error handling\n      DBHelper.fetchRestaurants(function (error, restaurants) {\n        if (error) {\n          callback(error, null);\n        } else {\n          // Filter restaurants to have only given cuisine type\n          var results = restaurants.filter(function (r) {\n            return r.cuisine_type == cuisine;\n          });\n          callback(null, results);\n        }\n      }, identifier);\n    }\n\n    /**\r\n     * Fetch restaurants by a neighborhood with proper error handling.\r\n     */\n\n  }, {\n    key: 'fetchRestaurantByNeighborhood',\n    value: function fetchRestaurantByNeighborhood(neighborhood, callback) {\n      var identifier = 'neighborhood';\n      // Fetch all restaurants\n      DBHelper.fetchRestaurants(function (error, restaurants) {\n        if (error) {\n          callback(error, null);\n        } else {\n          // Filter restaurants to have only given neighborhood\n          var results = restaurants.filter(function (r) {\n            return r.neighborhood == neighborhood;\n          });\n          callback(null, results);\n        }\n      });\n    }\n\n    /**\r\n     * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n     */\n\n  }, {\n    key: 'fetchRestaurantByCuisineAndNeighborhood',\n    value: function fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\n      // Fetch all restaurants\n      DBHelper.fetchRestaurants(function (error, restaurants) {\n        if (error) {\n          callback(error, null);\n        } else {\n          var results = restaurants;\n          if (cuisine != 'all') {\n            // filter by cuisine\n            results = results.filter(function (r) {\n              return r.cuisine_type == cuisine;\n            });\n          }\n          if (neighborhood != 'all') {\n            // filter by neighborhood\n            results = results.filter(function (r) {\n              return r.neighborhood == neighborhood;\n            });\n          }\n          callback(null, results);\n        }\n      });\n    }\n\n    /**\r\n     * Fetch all neighborhoods with proper error handling.\r\n     * read from IndexDB if exists else store it\r\n     */\n\n  }, {\n    key: 'fetchNeighborhoods',\n    value: function fetchNeighborhoods(callback) {\n      // Fetch all restaurants\n      DBHelper.fetchRestaurants(function (error, restaurants) {\n        if (error) {\n          callback(error, null);\n        } else {\n          // Get all neighborhoods from all restaurants\n          var neighborhoods = restaurants.map(function (v, i) {\n            return restaurants[i].neighborhood;\n          });\n          // Remove duplicates from neighborhoods\n          var uniqueNeighborhoods = neighborhoods.filter(function (v, i) {\n            return neighborhoods.indexOf(v) == i;\n          });\n          callback(null, uniqueNeighborhoods);\n        }\n      });\n    }\n\n    /**\r\n     * Fetch all cuisines with proper error handling.\r\n     * read from IndexDB if exists or else exist\r\n     */\n\n  }, {\n    key: 'fetchCuisines',\n    value: function fetchCuisines(callback) {\n      // Fetch all restaurants\n      DBHelper.fetchRestaurants(function (error, restaurants) {\n        if (error) {\n          callback(error, null);\n        } else {\n          // Get all cuisines from all restaurants\n          var cuisines = restaurants.map(function (v, i) {\n            return restaurants[i].cuisine_type;\n          });\n          // Remove duplicates from cuisines\n          var uniqueCuisines = cuisines.filter(function (v, i) {\n            return cuisines.indexOf(v) == i;\n          });\n          callback(null, uniqueCuisines);\n        }\n      });\n    }\n\n    /**\r\n     * Restaurant page URL.\r\n     */\n\n  }, {\n    key: 'urlForRestaurant',\n    value: function urlForRestaurant(restaurant) {\n      return './restaurant.html?id=' + restaurant.id;\n    }\n\n    /**\r\n     * Restaurant image URL.\r\n     */\n\n  }, {\n    key: 'imageUrlForRestaurant',\n    value: function imageUrlForRestaurant(restaurant) {\n      return restaurant.photograph ? '/img/' + restaurant.photograph + '.jpg' : '/img/p.jpg';\n    }\n\n    /**\r\n     * Map marker for a restaurant.\r\n     */\n\n  }, {\n    key: 'mapMarkerForRestaurant',\n    value: function mapMarkerForRestaurant(restaurant, map) {\n      var marker = new google.maps.Marker({\n        position: restaurant.latlng,\n        title: restaurant.name,\n        url: DBHelper.urlForRestaurant(restaurant),\n        map: map,\n        animation: google.maps.Animation.DROP\n      });\n      return marker;\n    }\n  }, {\n    key: 'createDB',\n    value: function createDB() {\n      if (!('indexedDB' in window)) {\n        console.log('This browser does not support IndexedDB');\n        return;\n      }\n      if (!navigator.serviceWorker) {\n        return Promise.resolve();\n      }\n      return _idb2.default.open('restaurants', 1, function (upgradeDB) {\n        console.log('making a new object store');\n        switch (upgradeDB.oldVersion) {\n          case 0:\n            if (!upgradeDB.objectStoreNames.contains('reviews')) {\n              var _store = upgradeDB.createObjectStore('reviews', {\n                keyPath: 'id',\n                autoIncrement: true\n              });\n              // let review = upgradeDB.createObjectStore('reviews-info', {\n              //   keyPath: ['id', 'restaurant_id'],\n              //   autoIncrement: true\n              // })\n            }\n          case 1:\n            var store = upgradeDB.transaction.objectStore('reviews');\n            store.createIndex('neighborhood', 'neighborhood');\n            store.createIndex('cuisine_type', 'cuisine_type');\n            store.createIndex('id', 'id');\n          // let review = upgradeDB.transaction.objectStore('reviews-info');\n          // store.createIndex('id, restaurant_id', ['id', 'restaurant_id']);\n        }\n      });\n    }\n  }, {\n    key: 'createReviewDB',\n    value: function createReviewDB() {\n      if (!('indexedDB' in window)) {\n        console.log('This browser does not support IndexedDB');\n        return;\n      }\n      if (!navigator.serviceWorker) {\n        return Promise.resolve();\n      }\n      return _idb2.default.open('restaurants_review', 1, function (upgradeDB) {\n        console.log('making a new object store');\n        switch (upgradeDB.oldVersion) {\n          case 0:\n            if (!upgradeDB.objectStoreNames.contains('reviews-info')) {\n              var _review = upgradeDB.createObjectStore('reviews-info', {\n                keyPath: 'id',\n                autoIncrement: true\n              });\n            }\n          case 1:\n            var review = upgradeDB.transaction.objectStore('reviews-info');\n            review.createIndex('id', 'id');\n        }\n      });\n    }\n  }, {\n    key: 'readDB',\n    value: function readDB(index) {\n      console.log('read db');\n      if (!('indexedDB' in window)) {\n        console.log('This browser does not support IndexedDB');\n        return;\n      }\n      if (!navigator.serviceWorker) {\n        return Promise.resolve();\n      }\n      console.log('open db');\n      _idb2.default.open('restaurants', 1).then(function (db) {\n        var tx = db.transaction('reviews', 'readonly');\n        var store = tx.objectStore('reviews');\n        console.log('get from object store');\n        return index ? store.get(index) : store.getAll();\n      }).catch(function (error) {\n        console.log('error reading ' + error.message);\n      });\n    }\n  }, {\n    key: 'arrayBufferToBlob',\n    value: function arrayBufferToBlob(buffer, type) {\n      return new Blob([buffer], { type: type });\n    }\n  }, {\n    key: 'blobToArrayBuffer',\n    value: function blobToArrayBuffer(blob) {\n      return new Promise(function (resolve, reject) {\n        var reader = new FileReader();\n        reader.addEventListener('loadend', function (e) {\n          resolve(reader, result);\n        });\n        reader.addEventListener('error', reject);\n        reader.readAsArrayBuffer(blob);\n      });\n    }\n  }, {\n    key: 'DATABASE_URL',\n    get: function get() {\n      var port = 1337; // Change this to your server port\n      // return `http://localhost:${port}/data/restaurants.json`;\n      return 'http://localhost:' + port;\n    }\n  }]);\n\n  return DBHelper;\n}();\n\nexports.default = DBHelper;\n\n//# sourceURL=webpack:///./js/dbhelper.js?");

/***/ }),

/***/ "./js/restaurant_info.js":
/*!*******************************!*\
  !*** ./js/restaurant_info.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getParameterByName = exports.fillBreadcrumb = exports.updateReviewModal = exports.displayOfflineMsg = exports.updateReview = exports.retrieveReviewById = exports.createReviewHTML = exports.fillReviewsHTML = exports.fillRestaurantHoursHTML = exports.fillRestaurantHTML = exports.getImageSource = exports.fetchRestaurantFromURL = undefined;\n\nvar _dbhelper = __webpack_require__(/*! ./dbhelper.js */ \"./js/dbhelper.js\");\n\nvar _dbhelper2 = _interopRequireDefault(_dbhelper);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar restaurant = void 0;\nvar map;\n\n/**\n * Get current restaurant from page URL.\n */\nvar fetchRestaurantFromURL = exports.fetchRestaurantFromURL = function fetchRestaurantFromURL(callback) {\n  if (self.restaurant) {\n    // restaurant already fetched!\n    callback(null, self.restaurant);\n    return;\n  }\n  var id = getParameterByName('id');\n  if (!id) {\n    // no id found in URL\n    error = 'No restaurant id in URL';\n    callback(error, null);\n  } else {\n    _dbhelper2.default.fetchRestaurantById(id, function (error, restaurant) {\n      self.restaurant = restaurant;\n      if (!restaurant) {\n        console.log(error);\n        return;\n      }\n      fillRestaurantHTML();\n      callback(null, restaurant);\n    });\n  }\n};\n\nvar getImageSource = exports.getImageSource = function getImageSource(source, targetwidth) {\n  var src = source;\n\n  if (source && targetwidth) {\n    src = source.substring(0, source.lastIndexOf('.')) + '-' + targetwidth + source.substring(source.lastIndexOf('.'));\n  }\n  return src;\n};\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nvar fillRestaurantHTML = exports.fillRestaurantHTML = function fillRestaurantHTML() {\n  var restaurant = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.restaurant;\n\n  var name = document.getElementById('restaurant-name');\n  name.innerHTML = restaurant.name;\n\n  var address = document.getElementById('restaurant-address');\n  address.innerHTML = restaurant.address;\n\n  var image = document.getElementById('restaurant-img');\n  image.className = 'restaurant-img';\n  var imagename = _dbhelper2.default.imageUrlForRestaurant(restaurant);\n  var sourceSet = getImageSource(imagename, 'sm') + ' 400w,' + getImageSource(imagename, 'md') + ' 600w,' + getImageSource(imagename, 'lg') + ' 1440w';\n  image.setAttribute('srcset', sourceSet);\n  image.src = getImageSource(imagename, 'lg');\n  image.setAttribute('alt', restaurant.name);\n\n  var picture = document.getElementById('restaurant-pic');\n  var sourceElement = picture.getElementsByTagName('source');\n  // 900 breakpoint, lg\n  sourceElement[0].setAttribute('srcset', getImageSource(imagename, 'lg') + ' 1x,' + getImageSource(imagename, 'lg_2x') + ' 2x');\n  // 600 breakpoint, sm\n  sourceElement[1].setAttribute('srcset', getImageSource(imagename, 'sm') + ' 1x,' + getImageSource(imagename, 'sm_2x') + ' 2x');\n  // 601 breakpoint, md\n  sourceElement[2].setAttribute('srcset', getImageSource(imagename, 'md') + ' 1x,' + getImageSource(imagename, 'md_2x') + ' 2x');\n\n  var cuisine = document.getElementById('restaurant-cuisine');\n  cuisine.innerHTML = restaurant.cuisine_type;\n\n  // fill operating hours\n  if (restaurant.operating_hours) {\n    fillRestaurantHoursHTML();\n  }\n\n  // create DB\n  var dbPromiser = _dbhelper2.default.createReviewDB();\n\n  // fill reviews\n  _dbhelper2.default.fetchAllReviewsByRestaurant(restaurant.id, 'All', dbPromiser, function (error, reviews) {\n    self.reviews = reviews;\n    if (!reviews) {\n      console.log(error);\n      return;\n    }\n    fillReviewsHTML();\n    // callback(null, reviews);\n  });\n  // fillReviewsHTML();\n};\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nvar fillRestaurantHoursHTML = exports.fillRestaurantHoursHTML = function fillRestaurantHoursHTML() {\n  var operatingHours = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.restaurant.operating_hours;\n\n  var hours = document.getElementById('restaurant-hours');\n  for (var key in operatingHours) {\n    var row = document.createElement('tr');\n\n    var day = document.createElement('td');\n    day.innerHTML = key;\n    row.appendChild(day);\n\n    var time = document.createElement('td');\n    time.innerHTML = operatingHours[key];\n    row.appendChild(time);\n\n    hours.appendChild(row);\n  }\n};\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nvar fillReviewsHTML = exports.fillReviewsHTML = function fillReviewsHTML() {\n  var reviews = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.reviews;\n\n  var container = document.getElementById('reviews-container');\n  var title = document.createElement('h2');\n  // title.innerHTML = 'Reviews' +  '<a role=\"option\" href=\"#\" class=\"updateReview\" onclick=\"document.getElementById(\\'submission\\').style.display=\\'block\\'\">New</a>';\n  title.innerHTML = 'Reviews' + '<button type=\"submit\" id=\"createReview\" class=\"iconbtn\" onclick=\"updateReviewModal(\\'reset\\')\">New</button>';\n  container.appendChild(title);\n\n  if (!reviews) {\n    var noReviews = document.createElement('p');\n    noReviews.innerHTML = 'No reviews yet!';\n    container.appendChild(noReviews);\n    return;\n  }\n\n  var ul = document.getElementById('reviews-list');\n  reviews.forEach(function (review) {\n    ul.appendChild(createReviewHTML(review));\n  });\n  container.appendChild(ul);\n};\n\n/**\n * Create review HTML and add it to the webpage.\n */\nvar createReviewHTML = exports.createReviewHTML = function createReviewHTML(review) {\n  var li = document.createElement('li');\n  li.setAttribute('role', 'listitem');\n  li.setAttribute('tabindex', '0');\n  var name = document.createElement('p');\n  var reviewId = review.id;\n  var restaurantId = review.restaurant_id;\n  // name.innerHTML = `${review.name} <a role=\"option\" href=\"#\" class=\"updateReview\" onclick=\"retrieveReviewById(${reviewId})\">Update</a>`;\n  name.innerHTML = review.name + ' <button class=\"iconbtn\" onclick=\"retrieveReviewById(' + reviewId + ')\">Edit</button>';\n  li.appendChild(name);\n\n  /* const date = document.createElement('p');\n  date.innerHTML = review.createdAt;\n  li.appendChild(date);\n   const updateDate = document.createElement('p');\n  updateDate.innerHTML = review.updatedAt;\n  li.appendChild(updateDate); */\n\n  var rating = document.createElement('p');\n  rating.innerHTML = 'Rating: ' + review.rating;\n  li.appendChild(rating);\n\n  var comments = document.createElement('p');\n  comments.innerHTML = review.comments;\n  li.appendChild(comments);\n\n  // updateReviewModal(review,);\n  return li;\n};\n\n/* retrieve the review for update */\nvar retrieveReviewById = exports.retrieveReviewById = function retrieveReviewById(reviewId) {\n  // submit a fetch request to retrieve the particular review\n  // fill reviews\n  _dbhelper2.default.fetchAllReviewsByRestaurant(reviewId, 'I', null, function (error, reviews) {\n    self.reviews = reviews;\n    if (!reviews) {\n      console.log(error);\n      return;\n    }\n    updateReviewModal();\n    // callback(null, reviews);\n  });\n};\n\n/* create/update review */\nvar updateReview = exports.updateReview = function updateReview() {\n  console.log('update review');\n  // if goes offline store to localStorage\n\n  var newPost = document.getElementById('submission');\n  var review = {};\n  review.review_id = document.getElementById('reviewid').value;\n  review.name = document.getElementById('reviewername').value;\n  review.comments = document.getElementById('comment').value;\n  review.rating = document.getElementById('rating').value;\n  review.restaurant_id = document.getElementById('restid').value;\n  // store the data\n  _dbhelper2.default.postReviewData(review, function (error) {\n    displayOfflineMsg(review);\n  });\n};\n\nvar displayOfflineMsg = exports.displayOfflineMsg = function displayOfflineMsg(review) {\n  var modal = document.getElementById('notification');\n\n  modal.style.display = 'none';\n  localStorage.setItem('newPost', review);\n};\n\n/* update review modal field values */\nvar updateReviewModal = exports.updateReviewModal = function updateReviewModal() {\n  var review = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.reviews;\n\n  document.getElementById('submission').style.display = 'block';\n  document.getElementById('createReview').style.display = 'none';\n  document.getElementById('restid').value = review.restaurant_id;\n  if (review === 'reset') {\n    document.getElementById('reviewid').value = '';\n    document.getElementById('reviewername').value = '';\n    document.getElementById('reviewername').disabled = false;\n    document.getElementById('comment').value = '';\n    document.getElementById('rating').value = '5';\n  } else {\n    document.getElementById('reviewid').value = review.id;\n    document.getElementById('reviewername').value = review.name;\n    document.getElementById('reviewername').disabled = true;\n    document.getElementById('comment').value = review.comments;\n    document.getElementById('rating').value = review.rating;\n  }\n};\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nvar fillBreadcrumb = exports.fillBreadcrumb = function fillBreadcrumb() {\n  var restaurant = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.restaurant;\n\n  var breadcrumb = document.getElementById('breadcrumb');\n  var li = document.createElement('li');\n  li.setAttribute('class', 'restaurant-selected');\n  li.innerHTML = restaurant.name;\n  breadcrumb.appendChild(li);\n};\n\n/**\n * Get a parameter by name from page URL.\n */\nvar getParameterByName = exports.getParameterByName = function getParameterByName(name, url) {\n  if (!url) url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),\n      results = regex.exec(url);\n  if (!results) return null;\n  if (!results[2]) return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n};\n\n//# sourceURL=webpack:///./js/restaurant_info.js?");

/***/ }),

/***/ "./node_modules/idb/lib/idb.js":
/*!*************************************!*\
  !*** ./node_modules/idb/lib/idb.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      // Don't create iterateKeyCursor if openKeyCursor doesn't exist.\n      if (!(funcName in Constructor.prototype)) return;\n\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      request.onupgradeneeded = function(event) {\n        if (upgradeCallback) {\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n        }\n      };\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (true) {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  }\n  else {}\n}());\n\n\n//# sourceURL=webpack:///./node_modules/idb/lib/idb.js?");

/***/ })

/******/ });